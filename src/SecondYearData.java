/**
 * A file to store one set of data used to train and test the networks.
 * The data used is from a second year project in neural networks.
 * The data is machine generated.
 * It is known that a back-prop network can be trained to approximate this data.
 * @author Rob Impey
 * @date 20-ii-03
 */

import java.awt.*;

public class SecondYearData extends DataSet
{
    public SecondYearData()
    {
	// Create the DataSet
	super(200);
	
	double[][] in = new double[super.getLength()][3];
	double[][] out = new double[super.getLength()][1];

	in[0][0] = 0.653358;
	in[0][1] = 0.691042;
	in[0][2] = 0.315553; 
	out[0][0] = 1.488978;
	
	in[1][0] = 0.813664;
	in[1][1] = 0.033502; 
	in[1][2] = 0.001782; 
	out[1][0] = 1.274849;	
	
	in[2][0] = 0.101589;
	in[2][1] = 0.866740;
	in[2][2] = 0.900147; 
	out[2][0] = 0.849484; 	

	in[3][0] = 0.038033;
	in[3][1] = 0.975541;
	in[3][2] = 0.556456; 
	out[3][0] = 0.603429; 

	in[4][0] = 0.214409;
	in[4][1] = 0.621463; 
	in[4][2] = 0.947020; 
	out[4][0] = 1.456336; 
	
	in[5][0] = 0.660986; 
	in[5][1] = 0.708349;
	in[5][2] = 0.223063; 
	out[5][0] = 1.111439; 
		
	in[6][0] = 0.029077;
	in[6][1] = 0.521198;
	in[6][2] = 0.137565;  
	out[6][0] = 0.679027;
	
	in[7][0] = 0.114675;
	in[7][1] = 0.426881; 
	in[7][2] = 0.859663; 
	out[7][0] = 2.556925; 

	in[8][0] =0.040246;
	in[8][1] =0.588063; 
	in[8][2] = 0.425432; 
	out[8][0] =1.075567; 

	in[9][0] = 0.336396;
	in[9][1] = 0.761248;
	in[9][2] = 0.098052;
	out[9][0] = 0.902590; 
		
	in[10][0] = 0.200051;
	in[10][1] = 0.313370;
	in[10][2] = 0.057632; 
	out[10][0] = 1.377431;
		
	in[11][0] = 0.941519;
	in[11][1] = 0.083951;
	in[11][2] = 0.096620; 
	out[11][0] = 1.654409;
		
	in[12][0] = 0.958466;
	in[12][1] = 0.724622;
	in[12][2] = 0.950511; 
	out[12][0] = 1.158909; 
	
	in[13][0] = 0.997020;
	in[13][1] = 0.001285; 
	in[13][2] = 0.165725; 
	out[13][0] = 2.771160; 
		
	in[14][0] = 0.025715;
	in[14][1] = 0.884390;
	in[14][2] = 0.356849; 
	out[14][0] = 0.496786; 
		
	in[15][0] = 0.682018;
	in[15][1] = 0.485749;
	in[15][2] = 0.448874; 
	out[15][0] = 2.626273; 
		 
	in[16][0] = 0.066920;
	in[16][1] = 0.314560; 
	in[16][2] = 0.574698; 
	out[16][0] = 2.530308;
		
	in[17][0] = 0.163628; 
	in[17][1] = 0.344961; 
	in[17][2] = 0.999443; 
	out[17][0] = 1.042599; 
		
	in[18][0] = 0.373949;
	in[18][1] = 0.599371; 
	in[18][2] = 0.754853;  
	out[18][0] = 3.997574; 
		
	in[19][0] = 0.318909;
	in[19][1] = 0.224764; 
	in[19][2] = 0.352268;  
	out[19][0] = 3.715722; 
		
	in[20][0] = 0.156223;
	in[20][1] = 0.459272; 
	in[20][2] = 0.821789;  
	out[20][0] = 2.413696; 
		
	in[21][0] = 0.672067;
	in[21][1] = 0.997184; 
	in[21][2] = 0.706951; 
	out[21][0] = 1.026787; 

	in[22][0] = 0.151019;
	in[22][1] = 0.157618; 
	in[22][2] = 0.150943;  
	out[22][0] = 1.888571;
		
	in[23][0] = 0.875744;
	in[23][1] = 0.537930; 
	in[23][2] = 0.033442;  
	out[23][0] = 0.744380; 

	in[24][0] = 0.288327;
	in[24][1] = 0.185181; 
	in[24][2] = 0.226312;  
	out[24][0] = 2.093617; 

	in[25][0] = 0.527623;
	in[25][1] = 0.418914; 
	in[25][2] = 0.139974;  
	out[25][0] = 1.546715; 

	in[26][0] = 0.787755;
	in[26][1] = 0.526277; 
	in[26][2] = 0.173027; 
	out[26][0] = 0.966088; 

	in[27][0] = 0.459182;
	in[27][1] = 0.808236; 
	in[27][2] = 0.870085;  
	out[27][0] = 1.941192; 

	in[28][0] = 0.714003;
	in[28][1] = 0.198049;
	in[28][2] = 0.353557;  
	out[28][0] = 2.130113; 

	in[29][0] = 0.439557;
	in[29][1] = 0.917432; 
	in[29][2] = 0.813636;  
	out[29][0] = 1.794588; 

	in[30][0] = 0.626825;
	in[30][1] = 0.698664; 
	in[30][2] = 0.823630; 
	out[30][0] = 2.188686; 

	in[31][0] = 0.436219;
	in[31][1] = 0.219931; 
	in[31][2] = 0.225013;  
	out[31][0] = 2.642546; 

	in[32][0] = 0.822662;
	in[32][1] = 0.763409; 
	in[32][2] = 0.447726;  
	out[32][0] = 1.359306;

	in[33][0] = 0.719581;
	in[33][1] = 0.254140; 
	in[33][2] = 0.196813; 
	out[33][0] = 1.550990;

	in[34][0] = 0.619490;
	in[34][1] = 0.444328;
	in[34][2] = 0.017313; 
	out[34][0] = 0.969420;

	in[35][0] = 0.248781;
	in[35][1] = 0.560867; 
	in[35][2] = 0.878357;  
	out[35][0] = 2.840233; 

	in[36][0] = 0.080183;
	in[36][1] = 0.361411; 
	in[36][2] = 0.311130;  
	out[36][0] = 1.449271; 

	in[37][0] = 0.582827;
	in[37][1] = 0.364799;
	in[37][2] = 0.808165;  
	out[37][0] = 4.154245; 

	in[38][0] = 0.233773;
	in[38][1] = 0.442069; 
	in[38][2] = 0.366734; 
	out[38][0] = 2.913757;

	in[39][0] = 0.569780;
	in[39][1] = 0.170825; 
	in[39][2] = 0.746800;  
	out[39][0] = 3.880945; 

	in[40][0] = 0.579991;
	in[40][1] = 0.992314; 
	in[40][2] = 0.914125;  
	out[40][0] = 0.730598; 

	in[41][0] = 0.168500;
	in[41][1] = 0.848663; 
	in[41][2] = 0.670701;  
	out[41][0] = 1.918948; 

	in[42][0] = 0.750976;
	in[42][1] = 0.737802; 
	in[42][2] = 0.139914; 
	out[42][0] = 0.755110; 

	in[43][0] = 0.504050;
	in[43][1] = 0.626542;
	in[43][2] = 0.263027;  
	out[43][0] = 1.631348; 

	in[44][0] = 0.637794;
	in[44][1] = 0.254037;
	in[44][2] = 0.727965;  
	out[44][0] = 4.021198; 

	in[45][0] = 0.099754;
	in[45][1] = 0.332377; 
	in[45][2] = 0.600696;  
	out[45][0] = 3.076644; 

	in[46][0] = 0.830180;
	in[46][1] = 0.779396;
	in[46][2] = 0.929278; 
	out[46][0] = 0.968107; 

	in[47][0] = 0.623397;
	in[47][1] = 0.172323; 
	in[47][2] = 0.560112;  
	out[47][0] = 4.053916; 

	in[48][0] = 0.708806;
	in[48][1] = 0.621133; 
	in[48][2] = 0.214027; 
	out[48][0] = 1.119031; 

	in[49][0] = 0.455207;
	in[49][1] = 0.070121;
	in[49][2] = 0.455396;
	out[49][0] = 4.240055; 

	in[50][0] = 0.234185;
	in[50][1] = 0.903796; 
	in[50][2] = 0.201499; 
	out[50][0] = 0.804295; 

	in[51][0] = 0.507016;
	in[51][1] = 0.645010;
	in[51][2] = 0.042465;  
	out[51][0] = 0.903132; 

	in[52][0] = 0.777079;
	in[52][1] = 0.594545; 
	in[52][2] = 0.177444;  
	out[52][0] = 0.934748; 

	in[53][0] = 0.584397;
	in[53][1] = 0.114277; 
	in[53][2] = 0.371753;  
	out[53][0] = 3.202581; 

	in[54][0] = 0.034780;
	in[54][1] = 0.461727;
	in[54][2] = 0.646398;  
	out[54][0] = 1.648591; 

	in[55][0] = 0.170193;
	in[55][1] = 0.399398; 
	in[55][2] = 0.458187;  
	out[55][0] = 2.955653; 
	
	in[56][0] = 0.234198;
	in[56][1] = 0.944572; 
	in[56][2] = 0.013683; 
	out[56][0] = 0.467879;

	in[57][0] = 0.649200;
	in[57][1] = 0.514682;
	in[57][2] = 0.509602; 
	out[57][0] = 3.079420;

	in[58][0] = 0.388509;
	in[58][1] = 0.678285;
	in[58][2] = 0.156643; 
	out[58][0] = 1.365093; 

	in[59][0] = 0.693060;
	in[59][1] = 0.472435;
	in[59][2] = 0.939609; 
	out[59][0] = 1.862819;

	in[60][0] = 0.470983;
	in[60][1] = 0.712138;
	in[60][2] = 0.044892; 
	out[60][0] = 0.902337; 

	in[61][0] = 0.167401;
	in[61][1] = 0.711218; 
	in[61][2] = 0.040180; 
	out[61][0] = 0.702283;

	in[62][0] = 0.345599;
	in[62][1] = 0.939765;
	in[62][2] = 0.135856;
	out[62][0] = 0.660175; 
	    
	in[63][0] = 0.967357;
	in[63][1] = 0.852653; 
	in[63][2] = 0.431461; 
	out[63][0] = 1.453190; 

	in[64][0] = 0.796592;
	in[64][1] = 0.599108;
	in[64][2] = 0.614264;
	out[64][0] = 2.232829; 

	in[65][0] = 0.980897;
	in[65][1] = 0.698692; 
	in[65][2] = 0.727773;  
	out[65][0] = 2.185327; 

	in[66][0]= 0.3878905;
	in[66][1] = 0.914927;
	in[66][2] = 0.013027;
	out[66][0] = 0.595022;

	in[67][0] = 0.320090;
	in[67][1] = 0.238834; 
	in[67][2] = 0.553884; 
	out[67][0] = 5.154118; 

	in[68][0] = 0.090169;
	in[68][1] = 0.534876;
	in[68][2] = 0.374555; 
	out[68][0] = 1.276754; 

	in[69][0] = 0.090936;
	in[69][1] = 0.552732;
	in[69][2] = 0.653909; 
	out[69][0] = 2.319861; 

	in[70][0] = 0.056353;
	in[70][1] = 0.682129;
	in[70][2] = 0.019688; 
	out[70][0] = 0.453040; 

	in[71][0] = 0.985681;
	in[71][1] = 0.683228; 
	in[71][2] = 0.345800;  
	out[71][0] = 1.701678; 

	in[72][0] = 0.059319;
	in[72][1] = 0.869990; 
	in[72][2] = 0.887008;  
	out[72][0] = 0.737797;

	in[73][0] = 0.926973;
	in[73][1] = 0.453635; 
	in[73][2] = 0.356442;  
	out[73][0] = 2.409859;

	in[74][0] = 0.696339;
	in[74][1] = 0.539265; 
	in[74][2] = 0.500481;  
	out[74][0] = 2.185529; 

	in[75][0] = 0.415137;
	in[75][1] = 0.884223;
	in[75][2] = 0.763258; 
	out[75][0] = 2.245152;

	in[76][0] = 0.897797;
	in[76][1] = 0.532828;
	in[76][2] = 0.241754; 
	out[76][0] = 1.468710; 

	in[77][0] = 0.499789;
	in[77][1] = 0.990530; 
	in[77][2] = 0.750955; 
	out[77][0] = 1.639257; 

	in[78][0] = 0.789501;
	in[78][1] = 0.449486; 
	in[78][2] = 0.995348;  
	out[78][0] = 0.940489; 

	in[79][0] = 0.728449;
	in[79][1] = 0.043911; 
	in[79][2] = 0.508658; 
	out[79][0] = 3.678981; 

	in[80][0] = 0.859823;
	in[80][1] = 0.052319; 
	in[80][2] = 0.361071; 
	out[80][0] = 2.537514; 

	in[81][0] = 0.046182;
	in[81][1] = 0.445610; 
	in[81][2] = 0.653762;  
	out[81][0] = 2.149476; 

	in[82][0] = 0.685780;
	in[82][1]= 0.0194585; 
	in[82][2] = 0.220603; 
	out[82][0] = 1.885946; 

	in[83][0] = 0.258381;
	in[83][1] = 0.652693;
	in[83][2] = 0.470593; 
	out[83][0] = 2.891071;

	in[84][0] = 0.366260;
	in[84][1] = 0.073078; 
	in[84][2] = 0.569275; 
	out[84][0] = 6.992823; 

	in[85][0] = 0.295091;
	in[85][1] = 0.150519;
	in[85][2] = 0.566032; 
	out[85][0] = 5.463786; 

	in[86][0] = 0.861468;
	in[86][1] = 0.384235; 
	in[86][2] = 0.337783; 
	out[86][0] = 1.904490;

	in[87][0] = 0.037538;
	in[87][1] = 0.065265; 
	in[87][2] = 0.294854;  
	out[87][0] = 1.743275; 

	in[88][0] = 0.990343;
	in[88][1] = 0.671933; 
	in[88][2] = 0.994459;  
	out[88][0] = 1.121173; 

	in[89][0] = 0.280847;
	in[89][1] = 0.904786;
	in[89][2] = 0.150985;  
	out[89][0] = 0.655323;

	in[90][0] = 0.552305;
	in[90][1] = 0.911828; 
	in[90][2] = 0.968462;  
	out[90][0] = 0.694218; 

	in[91][0] = 0.475718;
	in[91][1] = 0.761458; 
	in[91][2] = 0.294049; 
	out[91][0] = 1.694093; 

	in[92][0] = 0.178152;
	in[92][1] = 0.370227;
	in[92][2] = 0.296720; 
	out[92][0] = 2.450415; 

	in[93][0] = 0.185986;
	in[93][1] = 0.657075; 
	in[93][2] = 0.509934;  
	out[93][0] = 2.294852; 

	in[94][0] = 0.934257;
	in[94][1] = 0.817332; 
	in[94][2] = 0.623289;  
	out[94][0] = 1.792775; 

	in[95][0] = 0.515434;
	in[95][1] = 0.726608; 
	in[95][2] = 0.949556; 
	out[95][0] = 1.384646; 

	in[96][0] = 0.279160;
	in[96][1] = 0.201881; 
	in[96][2] = 0.789819; 
	out[96][0] = 5.693870; 

	in[97][0] = 0.656575;
	in[97][1] = 0.939716;
	in[97][2] = 0.828154;
	out[97][0] = 1.123692;

	in[98][0] = 0.560500;
	in[98][1] = 0.992416; 
	in[98][2] = 0.892506; 
	out[98][0] = 0.939899;

	in[99][0] = 0.108692;
	in[99][1] = 0.638351; 
	in[99][2] = 0.540971;  
	out[99][0] = 2.224940; 

	in[100][0] = 0.715433;
	in[100][1] = 0.027703; 
	in[100][2] = 0.787023;  
	out[100][0] = 3.979552;

	in[101][0] = 0.790880;
	in[101][1] = 0.916429;
	in[101][2] = 0.362398; 
	out[101][0] = 0.917708; 

	in[102][0] = 0.567777;
	in[102][1] = 0.337203; 
	in[102][2] = 0.246257;  
	out[102][0] = 1.952845; 

	in[103][0] = 0.484111;
	in[103][1] = 0.567283;
	in[103][2] = 0.333707; 
	out[103][0] = 2.411325; 

	in[104][0] = 0.723475;
	in[104][1] = 0.102995;
	in[104][2] = 0.987125; 
	out[104][0] = 1.915693; 

	in[105][0] = 0.596379;
	in[105][1] = 0.548971; 
	in[105][2] = 0.040387; 
	out[105][0] = 0.938216; 

	in[106][0] = 0.498247;
	in[106][1] = 0.353754;
	in[106][2] = 0.567448; 
	out[106][0] = 3.644875; 

	in[107][0] = 0.214269;
	in[107][1] = 0.162428;
	in[107][2] = 0.411755; 
	out[107][0] = 3.257452; 

	in[108][0] = 0.796830;
	in[108][1] = 0.220035;
	in[108][2] = 0.878826; 
	out[108][0] = 3.170611; 

	in[109][0] = 0.368164;
	in[109][1] = 0.058035;
	in[109][2] = 0.192004; 
	out[109][0] = 2.690690; 

	in[110][0] = 0.046779;
	in[110][1] = 0.892148; 
	in[110][2] = 0.558188; 
	out[110][0] = 0.892507;

	in[111][0] = 0.820614;
	in[111][1] = 0.438875; 
	in[111][2] = 0.390969;  
	out[111][0] = 1.810711; 

	in[112][0] = 0.654666;
	in[112][1] = 0.661103;
	in[112][2] = 0.966750;  
	out[112][0] = 1.076629; 

	in[113][0] = 0.250579;
	in[113][1] = 0.991066; 
	in[113][2] = 0.275022;  
	out[113][0] = 0.798852;

	in[114][0] = 0.313003;
	in[114][1] = 0.829301; 
	in[114][2] = 0.203170;  
	out[114][0] = 0.986100; 

	in[115][0] = 0.214234;
	in[115][1] = 0.844690; 
	in[115][2] = 0.603554;  
	out[115][0] = 1.842490; 

	in[116][0] = 0.914650;
	in[116][1] = 0.503505; 
	in[116][2] = 0.690866; 
	out[116][0] = 2.937041;

	in[117][0] = 0.446139;
	in[117][1] = 0.658835; 
	in[117][2] = 0.925506; 
	out[117][0] = 2.155868; 

	in[118][0] = 0.440069;
	in[118][1] = 0.650604; 
	in[118][2] = 0.628817;  
	out[118][0] = 3.156565; 

	in[119][0] = 0.988829;
	in[119][1] = 0.706572; 
	in[119][2] = 0.358684; 
	out[119][0] = 1.661513;

	in[120][0] = 0.539814;
	in[120][1] = 0.952810; 
	in[120][2] = 0.672601;  
	out[120][0] = 1.270580; 

	in[121][0] = 0.304178;
	in[121][1] = 0.665421; 
	in[121][2] = 0.164281; 
	out[121][0] = 1.535724; 

	in[122][0] = 0.964489;
	in[122][1] = 0.869685; 
	in[122][2] = 0.822533;
	out[122][0] = 1.520046; 

	in[123][0] = 0.650152;
	in[123][1] = 0.865143;
	in[123][2] = 0.947766;  
	out[123][0] = 0.924326; 

	in[124][0] = 0.072047;
	in[124][1] = 0.412181;
	in[124][2] = 0.543098; 
	out[124][0] = 2.541865; 

	in[125][0] = 0.485352;
	in[125][1] = 0.695089;
	in[125][2] = 0.874847;  
	out[125][0] = 2.579473; 

	in[126][0] = 0.980169;
	in[126][1] = 0.419123; 
	in[126][2] = 0.379392; 
	out[126][0] = 2.776956; 

	in[127][0] = 0.346854;
	in[127][1] = 0.031272; 
	in[127][2] = 0.673470;  
	out[127][0] = 6.250303; 

	in[128][0] = 0.161100;
	in[128][1] = 0.701954; 
	in[128][2] = 0.727629;  
	out[128][0] = 2.505217; 

	in[129][0] = 0.266922;
	in[129][1] = 0.491661; 
	in[129][2] = 0.955415;  
	out[129][0] = 2.419847; 

	in[130][0] = 0.841915;
	in[130][1] = 0.630719;
	in[130][2] = 0.343471;  
	out[130][0] = 1.146152; 

	in[131][0] = 0.772183;
	in[131][1] = 0.983255; 
	in[131][2] = 0.427330;  
	out[131][0] = 0.761565; 

	in[132][0] = 0.286208;
	in[132][1] = 0.989048; 
	in[132][2] = 0.309967;  
	out[132][0] = 0.848122; 

	in[133][0] = 0.706886;
	in[133][1] = 0.668626; 
	in[133][2] = 0.925839;  
	out[133][0] = 1.245291; 

	in[134][0] = 0.466602;
	in[134][1] = 0.595705; 
	in[134][2] = 0.798575;  
	out[134][0] = 3.873144; 

	in[135][0] = 0.507497;
	in[135][1] = 0.377866; 
	in[135][2] = 0.345570;  
	out[135][0] = 3.378490; 

	in[136][0] = 0.609798;
	in[136][1] = 0.213069; 
	in[136][2] = 0.886745;  
	out[136][0] = 3.360291; 

	in[137][0] = 0.975508;
	in[137][1] = 0.548551;
	in[137][2] = 0.695395; 
	out[137][0] = 3.894527; 

	in[138][0] = 0.340595;
	in[138][1] = 0.284064; 
	in[138][2] = 0.610039;  
	out[138][0] = 5.770240; 

	in[139][0] = 0.268325;
	in[139][1] = 0.467087;
	in[139][2] = 0.712173;  
	out[139][0] = 4.354008;

	in[140][0] = 0.324923;
	in[140][1] = 0.090424; 
	in[140][2] = 0.282890;  
	out[140][0] = 3.167838;

	in[141][0] = 0.676255;
	in[141][1] = 0.155382; 
	in[141][2] = 0.391196;  
	out[141][0] = 3.173982; 

	in[142][0] = 0.556966;
	in[142][1] = 0.329159;
	in[142][2] = 0.962210;  
	out[142][0] = 1.925778; 

	in[143][0] = 0.008902;
	in[143][1] = 0.081311;
	in[143][2] = 0.351723; 
	out[143][0] = 1.540147; 

	in[144][0] = 0.072127;
	in[144][1] = 0.451185; 
	in[144][2] = 0.277248;  
	out[144][0] = 1.334804; 

	in[145][0] = 0.088221;
	in[145][1] = 0.506450;
	in[145][2] = 0.532541;  
	out[145][0] = 2.271522; 

	in[146][0] = 0.646692;
	in[146][1] = 0.575478; 
	in[146][2] = 0.791795; 
	out[146][0] = 2.612451; 

	in[147][0] = 0.424014;
	in[147][1] = 0.177648; 
	in[147][2] = 0.770282;  
	out[147][0] = 5.938820; 

	in[148][0] = 0.911409;
	in[148][1] = 0.368939; 
	in[148][2] = 0.870484;  
	out[148][0] = 2.664928; 

	in[149][0] = 0.402420;
	in[149][1] = 0.670193;
	in[149][2] = 0.161439;  
	out[149][0] = 1.479202; 
 
	in[150][0] = 0.381516;
	in[150][1] = 0.154576; 
	in[150][2] = 0.590017;  
	out[150][0] = 5.663941; 

	in[151][0] = 0.865852;
	in[151][1] = 0.036961; 
	in[151][2] = 0.079725;  
	out[151][0] = 1.497302; 

	in[152][0] = 0.672530;
	in[152][1] = 0.802807; 
	in[152][2] = 0.311432; 
	out[152][0] = 1.139610; 

	in[153][0] = 0.652382;
	in[153][1] = 0.635895; 
	in[153][2] = 0.396664; 
	out[153][0] = 2.198654; 

	in[154][0] = 0.352099;
	in[154][1] = 0.433340; 
	in[154][2] = 0.750881; 
	out[154][0] = 4.420104; 

	in[155][0] = 0.117946;
	in[155][1] = 0.685112; 
	in[155][2] = 0.988474;  
	out[155][0] = 0.705731; 

	in[156][0] = 0.888568;
	in[156][1] = 0.600844;
	in[156][2] = 0.598787; 
	out[156][0] = 1.949897; 

	in[157][0] = 0.075646;
	in[157][1] = 0.392947; 
	in[157][2] = 0.348598;  
	out[157][0] = 1.872371; 

	in[158][0] = 0.772265;
	in[158][1] = 0.140444; 
	in[158][2] = 0.511794;  
	out[158][0] = 3.596567; 

	in[159][0] = 0.726396;
	in[159][1] = 0.465647; 
	in[159][2] = 0.013781; 
	out[159][0] = 0.832745; 

	in[160][0] = 0.292765;
	in[160][1] = 0.283183; 
	in[160][2] = 0.627254;  
	out[160][0] = 5.967848; 

	in[161][0] = 0.664833;
	in[161][1] = 0.570988; 
	in[161][2] = 0.966296;  
	out[161][0] = 1.246696; 

	in[162][0] = 0.461745;
	in[162][1] = 0.647970; 
	in[162][2] = 0.618588;  
	out[162][0] = 3.804283; 

	in[163][0] = 0.448507;
	in[163][1] = 0.240204;
	in[163][2] = 0.839937; 
	out[163][0] = 4.302418;

	in[164][0] = 0.535451;
	in[164][1] = 0.847529; 
	in[164][2] = 0.059357; 
	out[164][0] = 0.658989; 

	in[165][0] = 0.115216;
	in[165][1] = 0.848623;
	in[165][2] = 0.714262; 
	out[165][0] = 1.624332; 

	in[166][0] = 0.615108;
	in[166][1] = 0.502905;
	in[166][2] = 0.164057; 
	out[166][0] = 1.279177; 

	in[167][0] = 0.982068;
	in[167][1] = 0.125965; 
	in[167][2] = 0.587223;  
	out[167][0] = 5.288039; 

	in[168][0] = 0.067572;
	in[168][1] = 0.140532; 
	in[168][2] = 0.189653;  
	out[168][0] = 1.685050;

	in[169][0] = 0.582887;
	in[169][1] = 0.745424; 
	in[169][2] = 0.223902; 
	out[169][0] = 1.146162; 

	in[170][0] = 0.747762;
	in[170][1] = 0.440494;
	in[170][2] = 0.113233;  
	out[170][0] = 0.940029; 

	in[171][0] = 0.624186;
	in[171][1] = 0.557985; 
	in[171][2] = 0.190925; 
	out[171][0] = 1.461852; 

	in[172][0] = 0.973836;
	in[172][1] = 0.327973; 
	in[172][2] = 0.533885; 
	out[172][0] = 4.325085; 
 
	in[173][0] = 0.277009;
	in[173][1] = 0.063439;
	in[173][2] = 0.495861; 
	out[173][0] = 5.895485; 

	in[174][0] = 0.434498;
	in[174][1] = 0.957544; 
	in[174][2] = 0.152348; 
	out[174][0] = 0.689931; 

	in[175][0] = 0.433712;
	in[175][1] = 0.090239;
	in[175][2] = 0.829909; 
	out[175][0] = 6.128956;

	in[176][0] = 0.040554;
	in[176][1] = 0.799546; 
	in[176][2] = 0.891049;  
	out[176][0] = 0.858529; 

	in[177][0] = 0.338856;
	in[177][1] = 0.652406;
	in[177][2] = 0.615067; 
	out[177][0] = 3.122769;

	in[178][0] = 0.817979;
	in[178][1] = 0.673939; 
	in[178][2] = 0.784366; 
	out[178][0] = 2.204206;

	in[179][0] = 0.070203;
	in[179][1] = 0.037637; 
	in[179][2] = 0.272462; 
	out[179][0] = 2.040320;

	in[180][0] = 0.207463;
	in[180][1] = 0.407556; 
	in[180][2] = 0.230829;  
	out[180][0] = 2.199646;

	in[181][0] = 0.905433;
	in[181][1] = 0.401450; 
	in[181][2] = 0.728211; 
	out[181][0] = 2.952353;

	in[182][0] = 0.197755;
	in[182][1] = 0.913725; 
	in[182][2] = 0.454748; 
	out[182][0] = 1.283521; 

	in[183][0] = 0.163085;
	in[183][1] = 0.229242;
	in[183][2] = 0.297071; 
	out[183][0] = 2.387154; 

	in[184][0] = 0.470148;
	in[184][1] = 0.975512;
	in[184][2] = 0.527735;
	out[184][0] = 1.225717; 

	in[185][0] = 0.091306;
	in[185][1] = 0.785757; 
	in[185][2] = 0.573782; 
	out[185][0] = 1.241784; 

	in[186][0] = 0.431625;
	in[186][1] = 0.214026; 
	in[186][2] = 0.532047;  
	out[186][0] = 5.311937; 

	in[187][0] = 0.767231;
	in[187][1] = 0.540741; 
	in[187][2] = 0.950875; 
	out[187][0] = 1.337763; 

	in[188][0] = 0.693748;
	in[188][1] = 0.833673; 
	in[188][2] = 0.111583; 
	out[188][0] = 0.570879; 

	in[189][0] = 0.284981;
	in[189][1] = 0.571332; 
	in[189][2] = 0.510861;  
	out[189][0] = 3.219526; 

	in[190][0] = 0.548294;
	in[190][1] = 0.989158; 
	in[190][2] = 0.343738;  
	out[190][0] = 1.090619; 

	in[191][0] = 0.844495;
	in[191][1] = 0.509762; 
	in[191][2] = 0.516259;  
	out[191][0] = 2.382765; 

	in[192][0] = 0.028319;
	in[192][1] = 0.323570; 
	in[192][2] = 0.956217;  
	out[192][0] = 0.952568; 

	in[193][0] = 0.836565;
	in[193][1] = 0.825093; 
	in[193][2] = 0.757970;  
	out[193][0] = 1.605036;

	in[194][0] = 0.727099;
	in[194][1] = 0.885588; 
	in[194][2] = 0.759287;  
	out[194][0] = 1.254891;

	in[195][0] = 0.856497;
	in[195][1] = 0.742203;
	in[195][2] = 0.071603;  
	out[195][0] = 0.494159; 

	in[196][0] = 0.848959;
	in[196][1] = 0.165813;
	in[196][2] = 0.144299; 
	out[196][0] = 1.518781;

	in[197][0] = 0.116179;
	in[197][1] = 0.336452; 
	in[197][2] = 0.732186; 
	out[197][0] = 3.482643; 

	in[198][0] = 0.595761;
	in[198][1] = 0.113392; 
	in[198][2] = 0.508029;  
	out[198][0] = 3.895331; 

	in[199][0] = 0.653156;
	in[199][1] = 0.245298;
	in[199][2] = 0.909678; 
	out[199][0] = 3.067042;

	for (int i = 0; i < super.getLength(); i++)
	    {
		super.add(new Tuple(in[i], out[i]));
	    }
    }

    public static void main(String[] args)
    {
	SecondYearData sYD = new SecondYearData();
	double[] out = new double[sYD.getLength()];
	Tuple t;
	for (int i = 0; i < sYD.getLength(); i++)
	    {
		out[i] = sYD.getTuple(i).getOutput(0);
	    }

	
	GraphFrame gF = new GraphFrame("SecondYearDate", "", "", out, Color.red);
	gF.show();
    }
}
